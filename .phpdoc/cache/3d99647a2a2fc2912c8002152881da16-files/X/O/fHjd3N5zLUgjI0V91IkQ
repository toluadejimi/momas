1758919914
3d99647a2a2fc2912c8002152881da16-phpdoc%3A32815a23f53dade38608819e51d6d98e-88a1422144e62433dad9fce7a22a946f
s:7896:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjIxOiJ1cGRhdGVfbWltZV90eXBlcy5waHAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiODhhMTQyMjE0NGU2MjQzM2RhZDlmY2U3YTIyYTk0NmYiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo1NToidmVuZG9yL3N5bWZvbnkvbWltZS9SZXNvdXJjZXMvYmluL3VwZGF0ZV9taW1lX3R5cGVzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NDk3NzoiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCmlmICgnY2xpJyAhPT0gXFBIUF9TQVBJKSB7CiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGlzIHNjcmlwdCBtdXN0IGJlIHJ1biBmcm9tIHRoZSBjb21tYW5kIGxpbmUuJyk7Cn0KCi8vIGxvYWQgbmV3IG1hcAokZGF0YSA9IGpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvanNodHRwL21pbWUtZGIvZGIuanNvbicpLCB0cnVlKTsKJG5ldyA9IFtdOwpmb3JlYWNoICgkZGF0YSBhcyAkbWltZVR5cGUgPT4gJG1pbWVUeXBlSW5mb3JtYXRpb24pIHsKICAgIGlmICghYXJyYXlfa2V5X2V4aXN0cygnZXh0ZW5zaW9ucycsICRtaW1lVHlwZUluZm9ybWF0aW9uKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgfQogICAgJG5ld1skbWltZVR5cGVdID0gJG1pbWVUeXBlSW5mb3JtYXRpb25bJ2V4dGVuc2lvbnMnXTsKfQoKJHhtbCA9IHNpbXBsZXhtbF9sb2FkX3N0cmluZyhmaWxlX2dldF9jb250ZW50cygnaHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3hkZy9zaGFyZWQtbWltZS1pbmZvLy0vcmF3L21hc3Rlci9kYXRhL2ZyZWVkZXNrdG9wLm9yZy54bWwuaW4nKSk7CmZvcmVhY2ggKCR4bWwgYXMgJG5vZGUpIHsKICAgICRleHRzID0gW107CiAgICBmb3JlYWNoICgkbm9kZS0+Z2xvYiBhcyAkZ2xvYikgewogICAgICAgICRwYXR0ZXJuID0gKHN0cmluZykgJGdsb2JbJ3BhdHRlcm4nXTsKICAgICAgICBpZiAoJyonICE9ICRwYXR0ZXJuWzBdIHx8ICcuJyAhPSAkcGF0dGVyblsxXSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgICRleHRzW10gPSBzdWJzdHIoJHBhdHRlcm4sIDIpOwogICAgfQoKICAgIGlmICghJGV4dHMpIHsKICAgICAgICBjb250aW51ZTsKICAgIH0KCiAgICAkbXQgPSBzdHJ0b2xvd2VyKChzdHJpbmcpICRub2RlWyd0eXBlJ10pOwogICAgJG5ld1skbXRdID0gYXJyYXlfbWVyZ2UoJG5ld1skbXRdID8/IFtdLCAkZXh0cyk7CiAgICBmb3JlYWNoICgkbm9kZS0+YWxpYXMgYXMgJGFsaWFzKSB7CiAgICAgICAgJG10ID0gc3RydG9sb3dlcigoc3RyaW5nKSAkYWxpYXNbJ3R5cGUnXSk7CiAgICAgICAgJG5ld1skbXRdID0gYXJyYXlfbWVyZ2UoJG5ld1skbXRdID8/IFtdLCAkZXh0cyk7CiAgICB9Cn0KCi8vIGxvYWQgY3VycmVudCBtYXAKJGRhdGEgPSBmaWxlX2dldF9jb250ZW50cygkb3V0cHV0ID0gX19ESVJfXy4nLy4uLy4uL01pbWVUeXBlcy5waHAnKTsKJGN1cnJlbnQgPSBbXTsKJHByZSA9ICcnOwokcG9zdCA9ICcnOwpmb3JlYWNoIChleHBsb2RlKCJcbiIsICRkYXRhKSBhcyAkbGluZSkgewogICAgaWYgKCFwcmVnX21hdGNoKCJ7XiAgICAgICAgJyhbXiddKy9bXiddKyknID0+IFxbJyguKyknXF0sJH0iLCAkbGluZSwgJG1hdGNoZXMpKSB7CiAgICAgICAgaWYgKCEkY3VycmVudCkgewogICAgICAgICAgICAkcHJlIC49ICRsaW5lLiJcbiI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHBvc3QgLj0gJGxpbmUuIlxuIjsKICAgICAgICB9CiAgICAgICAgY29udGludWU7CiAgICB9CiAgICAkY3VycmVudFskbWF0Y2hlc1sxXV0gPSBleHBsb2RlKCInLCAnIiwgJG1hdGNoZXNbMl0pOwp9CgokZGF0YSA9ICRwcmU7CgovLyByZXZlcnNlIG1hcAovLyB3ZSBwcmVmaWxsIHRoZSBleHRlbnNpb25zIHdpdGggc29tZSBwcmVmZXJlbmNlcyBmb3IgY29udGVudC10eXBlcwokZXh0cyA9IFsKICAgICdhc2ljZScgPT4gWydhcHBsaWNhdGlvbi92bmQuZXRzaS5hc2ljLWUremlwJ10sCiAgICAnYnoyJyA9PiBbJ2FwcGxpY2F0aW9uL3gtYnoyJ10sCiAgICAnY3N2JyA9PiBbJ3RleHQvY3N2J10sCiAgICAnZWNtYScgPT4gWydhcHBsaWNhdGlvbi9lY21hc2NyaXB0J10sCiAgICAnZmx2JyA9PiBbJ3ZpZGVvL3gtZmx2J10sCiAgICAnZ2lmJyA9PiBbJ2ltYWdlL2dpZiddLAogICAgJ2d6JyA9PiBbJ2FwcGxpY2F0aW9uL3gtZ3ppcCddLAogICAgJ2h0bScgPT4gWyd0ZXh0L2h0bWwnXSwKICAgICdodG1sJyA9PiBbJ3RleHQvaHRtbCddLAogICAgJ2phcicgPT4gWydhcHBsaWNhdGlvbi94LWphdmEtYXJjaGl2ZSddLAogICAgJ2pwZycgPT4gWydpbWFnZS9qcGVnJ10sCiAgICAnanMnID0+IFsndGV4dC9qYXZhc2NyaXB0J10sCiAgICAna2V5bm90ZScgPT4gWydhcHBsaWNhdGlvbi92bmQuYXBwbGUua2V5bm90ZSddLAogICAgJ2tleScgPT4gWydhcHBsaWNhdGlvbi92bmQuYXBwbGUua2V5bm90ZSddLAogICAgJ20zdScgPT4gWydhdWRpby94LW1wZWd1cmwnXSwKICAgICdtNGEnID0+IFsnYXVkaW8vbXA0J10sCiAgICAnbWQnID0+IFsndGV4dC9tYXJrZG93bicsICd0ZXh0L3gtbWFya2Rvd24nXSwKICAgICdtZGInID0+IFsnYXBwbGljYXRpb24veC1tc2FjY2VzcyddLAogICAgJ21pZCcgPT4gWydhdWRpby9taWRpJ10sCiAgICAnbW92JyA9PiBbJ3ZpZGVvL3F1aWNrdGltZSddLAogICAgJ21wMycgPT4gWydhdWRpby9tcGVnJ10sCiAgICAnb2dnJyA9PiBbJ2F1ZGlvL29nZyddLAogICAgJ3BkZicgPT4gWydhcHBsaWNhdGlvbi9wZGYnXSwKICAgICdwaHAnID0+IFsnYXBwbGljYXRpb24veC1waHAnXSwKICAgICdwbmcnID0+IFsnaW1hZ2UvcG5nJ10sCiAgICAncHB0JyA9PiBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50J10sCiAgICAncmFyJyA9PiBbJ2FwcGxpY2F0aW9uL3gtcmFyLWNvbXByZXNzZWQnXSwKICAgICdocXgnID0+IFsnYXBwbGljYXRpb24vc3R1ZmZpdCddLAogICAgJ3NpdCcgPT4gWydhcHBsaWNhdGlvbi94LXN0dWZmaXQnLCAnYXBwbGljYXRpb24vc3R1ZmZpdCddLAogICAgJ3N2ZycgPT4gWydpbWFnZS9zdmcreG1sJ10sCiAgICAndGFyJyA9PiBbJ2FwcGxpY2F0aW9uL3gtdGFyJ10sCiAgICAndGlmJyA9PiBbJ2ltYWdlL3RpZmYnXSwKICAgICd0dGYnID0+IFsnYXBwbGljYXRpb24veC1mb250LXRydWV0eXBlJ10sCiAgICAndmNmJyA9PiBbJ3RleHQveC12Y2FyZCddLAogICAgJ3dhdicgPT4gWydhdWRpby93YXYnXSwKICAgICd3bWEnID0+IFsnYXVkaW8veC1tcy13bWEnXSwKICAgICd3bXYnID0+IFsnYXVkaW8veC1tcy13bXYnXSwKICAgICd4bHMnID0+IFsnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJ10sCiAgICAneWFtbCcgPT4gWydhcHBsaWNhdGlvbi95YW1sJ10sCiAgICAneW1sJyA9PiBbJ2FwcGxpY2F0aW9uL3lhbWwnXSwKICAgICd6aXAnID0+IFsnYXBwbGljYXRpb24vemlwJ10sCl07CgovLyB3ZSBtZXJnZSB0aGUgMiBtYXBzICh3ZSBuZXZlciByZW1vdmUgb2xkIG1pbWUgdHlwZXMpCiRtYXAgPSBhcnJheV9yZXBsYWNlX3JlY3Vyc2l2ZSgkY3VycmVudCwgJG5ldyk7Cgpmb3JlYWNoICgkZXh0cyBhcyAkZXh0ID0+ICR0eXBlcykgewogICAgZm9yZWFjaCAoJHR5cGVzIGFzICRtdCkgewogICAgICAgIGlmICghaXNzZXQoJG1hcFskbXRdKSkgewogICAgICAgICAgICAkbWFwICs9IFskbXQgPT4gWyRleHRdXTsKICAgICAgICB9CiAgICB9Cn0Ka3NvcnQoJG1hcCk7Cgpmb3JlYWNoICgkbWFwIGFzICRtaW1lVHlwZSA9PiAkZXh0ZW5zaW9ucykgewogICAgZm9yZWFjaCAoJGV4dHMgYXMgJGV4dCA9PiAkdHlwZXMpIHsKICAgICAgICBpZiAoaW5fYXJyYXkoJG1pbWVUeXBlLCAkdHlwZXMsIHRydWUpKSB7CiAgICAgICAgICAgIGFycmF5X3Vuc2hpZnQoJGV4dGVuc2lvbnMsICRleHQpOwogICAgICAgIH0KICAgIH0KICAgICRkYXRhIC49IHNwcmludGYoIiAgICAgICAgJyVzJyA9PiBbJyVzJ10sXG4iLCAkbWltZVR5cGUsIGltcGxvZGUoIicsICciLCBhcnJheV91bmlxdWUoJGV4dGVuc2lvbnMpKSk7Cn0KJGRhdGEgLj0gJHBvc3Q7Cgpmb3JlYWNoICgkbWFwIGFzICRtaW1lVHlwZSA9PiAkZXh0ZW5zaW9ucykgewogICAgZm9yZWFjaCAoJGV4dGVuc2lvbnMgYXMgJGV4dGVuc2lvbikgewogICAgICAgIGlmICgnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyA9PT0gJG1pbWVUeXBlICYmICdiaW4nICE9PSAkZXh0ZW5zaW9uKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgJGV4dHNbJGV4dGVuc2lvbl1bXSA9ICRtaW1lVHlwZTsKICAgIH0KfQprc29ydCgkZXh0cyk7CgokdXBkYXRlZCA9ICcnOwokc3RhdGUgPSAwOwpmb3JlYWNoIChleHBsb2RlKCJcbiIsICRkYXRhKSBhcyAkbGluZSkgewogICAgaWYgKCFwcmVnX21hdGNoKCJ7XiAgICAgICAgJyhbXicvXSspJyA9PiBcWycoLispJ1xdLCR9IiwgJGxpbmUsICRtYXRjaGVzKSkgewogICAgICAgIGlmICgxID09PSAkc3RhdGUpIHsKICAgICAgICAgICAgJHN0YXRlID0gMjsKICAgICAgICAgICAgZm9yZWFjaCAoJGV4dHMgYXMgJGV4dCA9PiAkbWltZVR5cGVzKSB7CiAgICAgICAgICAgICAgICAkdXBkYXRlZCAuPSBzcHJpbnRmKCIgICAgICAgICclcycgPT4gWyclcyddLFxuIiwgJGV4dCwgaW1wbG9kZSgiJywgJyIsIGFycmF5X3VuaXF1ZSgkbWltZVR5cGVzKSkpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICR1cGRhdGVkIC49ICRsaW5lLiJcbiI7CiAgICAgICAgY29udGludWU7CiAgICB9CiAgICAkc3RhdGUgPSAxOwp9CgokdXBkYXRlZCA9IHByZWdfcmVwbGFjZSgne1VwZGF0ZWQgZnJvbSB1cHN0cmVhbSBvbiAuKz9cLn0nLCBzcHJpbnRmKCdVcGRhdGVkIGZyb20gdXBzdHJlYW0gb24gJXMuJywgZGF0ZSgnWS1tLWQnKSksICR1cGRhdGVkLCAtMSk7CgpmaWxlX3B1dF9jb250ZW50cygkb3V0cHV0LCBydHJpbSgkdXBkYXRlZCwgIlxuIikuIlxuIik7CgplY2hvICJEb25lLlxuIjsKIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";