1758921726
5029e51e66aaf58bae66a64ddc4a848b-phpdoc%3A7c891627c8bea7abd474ebe4712cee5f-a2c145c0494bb5489e9a7c65af788817
s:44452:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:19:"LoginController.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:26:"\App\Http\Controllers\Auth";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\App\Http\Controllers\Auth";s:36:" phpDocumentor\Reflection\Fqsen name";s:4:"Auth";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:42:"\App\Http\Controllers\Auth\LoginController";O:35:"phpDocumentor\Reflection\Php\Class_":15:{s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:5:{s:51:"\App\Http\Controllers\Auth\LoginController::login()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Illuminate\Http\Request";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Request";}}s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"request";s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:24;s:47:" phpDocumentor\Reflection\Location columnNumber";i:542;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:523;s:47:" phpDocumentor\Reflection\Location columnNumber";i:17163;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:51:"\App\Http\Controllers\Auth\LoginController::login()";s:36:" phpDocumentor\Reflection\Fqsen name";s:5:"login";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}s:57:"\App\Http\Controllers\Auth\LoginController::delete_user()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Illuminate\Http\Request";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Request";}}s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"request";s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:527;s:47:" phpDocumentor\Reflection\Location columnNumber";i:17172;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:537;s:47:" phpDocumentor\Reflection\Location columnNumber";i:17437;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\App\Http\Controllers\Auth\LoginController::delete_user()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"delete_user";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}s:60:"\App\Http\Controllers\Auth\LoginController::reset_password()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Illuminate\Http\Request";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Request";}}s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"request";s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:538;s:47:" phpDocumentor\Reflection\Location columnNumber";i:17443;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:554;s:47:" phpDocumentor\Reflection\Location columnNumber";i:17957;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:60:"\App\Http\Controllers\Auth\LoginController::reset_password()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"reset_password";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}s:54:"\App\Http\Controllers\Auth\LoginController::get_user()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Illuminate\Http\Request";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Request";}}s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"request";s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:556;s:47:" phpDocumentor\Reflection\Location columnNumber";i:17964;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:602;s:47:" phpDocumentor\Reflection\Location columnNumber";i:19158;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:54:"\App\Http\Controllers\Auth\LoginController::get_user()";s:36:" phpDocumentor\Reflection\Fqsen name";s:8:"get_user";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}s:53:"\App\Http\Controllers\Auth\LoginController::support()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Illuminate\Http\Request";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Request";}}s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"request";s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:605;s:47:" phpDocumentor\Reflection\Location columnNumber";i:19166;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:623;s:47:" phpDocumentor\Reflection\Location columnNumber";i:19549;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:53:"\App\Http\Controllers\Auth\LoginController::support()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"support";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:22;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Class_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:626;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:42:"\App\Http\Controllers\Auth\LoginController";s:36:" phpDocumentor\Reflection\Fqsen name";s:15:"LoginController";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:32:"\App\Http\Controllers\Controller";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Controller";}s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:45:" phpDocumentor\Reflection\Php\Class_ readOnly";b:0;s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ attributes";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"a2c145c0494bb5489e9a7c65af788817";s:39:" phpDocumentor\Reflection\Php\File path";s:45:"app/Http/Controllers/Auth/LoginController.php";s:41:" phpDocumentor\Reflection\Php\File source";s:19555:"<?php

namespace App\Http\Controllers\Auth;

use App\Models\Estate;
use App\Models\Setting;
use App\Models\Tariff;
use App\Models\TariffState;
use App\Models\TarrifState;
use App\Models\UtilitiesPayment;
use App\Models\Utitlity;
use Carbon\Carbon;
use App\Models\User;
use App\Models\Meter;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Laravel\Passport\Passport;
use App\Models\OauthAccessToken;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;

class LoginController extends Controller
{
    public function login(request $request)
    {

        if($request->email == null) {
            $credentials = request(['meterNo', 'password']);
            $usr = User::where('meterNo', $request->meterNo)->first() ?? null;
            $status = User::where('meterNo', $request->meterNo)->first()->status ?? null;

            if($status == 9){
                $message = "User does not exist";
                $code = 401;
                return error($message, $code);
            }

            if ($usr == null) {
                $message = "User does not exist";
                $code = 404;
                return error($message, $code);
            }

            Passport::tokensExpireIn(Carbon::now()->addMinutes(20));
            Passport::refreshTokensExpireIn(Carbon::now()->addMinutes(20));

            if (!auth()->attempt($credentials)) {
                $message = "Meter No or Password Incorrect";
                $code = 422;
                return error($message, $code);
            }

            flush_token();


            $tariffs = Tariff::select('id', 'type', 'estate_id', 'title')
                ->where('user_id', Auth::id())
                ->get();
            foreach ($tariffs as $tariff) {
                $tariffState = TarrifState::where('tariff_id', $tariff->id)->first();
                $tariff->amount = $tariffState ? $tariffState->amount : null;
            }


            $admin_fee_get = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->latest('created_at')
                ->first();

            if($admin_fee_get){
                $admin_fee =  "1";
            }else{
                $admin_fee = "0";
            }

            $ck_utility = UtilitiesPayment::where('user_id', Auth::id())->where('type', 'utilities')->first();
            if($ck_utility){






            }else{

                $utility_amount = Estate::where('id', Auth::user()->estate_id)->first()->total_utility_amount ?? 0;
                $duration = Estate::where('id', Auth::user()->estate_id)->first()->duration ?? null;

                if($duration == null ){
                    $message = "Estate utility duration not set, Contact support";
                    $code = 404;
                    return error($message, $code);
                }



                $nextDueDate = Carbon::now();
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:

                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $utility_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->type = "utilities";
                $utli->total_amount = $utility_amount;
                $utli->save();

            }


            //checkAdmin fee
            $admin_fee_amount = Setting::where('id', 1)->first()->admin_fee;
            $ck_admin_fee = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->first();

            $ck_admin_fee_status = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->first()->status ?? null;

            $former_admin_fee_date = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->first()->created_at ?? null;


            if($ck_admin_fee){

            }elseif($ck_admin_fee && $ck_admin_fee_status == 2 ){

                $duration = "monthly";
                $nextDueDate =  $former_admin_fee_date;
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:
                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $admin_fee_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->total_amount = $admin_fee_amount;
                $utli->type = "admin_fee";
                $utli->save();


            }elseif($ck_admin_fee && $ck_admin_fee_status == null){

            $duration = "monthly";
            $nextDueDate =  Carbon::now();
            switch ($duration) {
                case 'weekly':
                    $nextDueDate->addWeek();
                    break;
                case 'monthly':
                    $nextDueDate->addMonth();
                    break;
                case 'yearly':
                    $nextDueDate->addYear();
                    break;
                default:
                    $mssage = "Unknown duration '{$duration}'";
                    send_notification($mssage);

            }

            $utli = new UtilitiesPayment();
            $utli->estate_id = Auth::user()->estate_id;
            $utli->user_id = Auth::id();
            $utli->amount = $admin_fee_amount;
            $utli->next_due_date = $nextDueDate;
            $utli->duration = $duration;
            $utli->total_amount = $admin_fee_amount;
            $utli->type = "admin_fee";
            $utli->save();


        }else{

                $duration = "monthly";
                $nextDueDate =  Carbon::now();
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:
                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $admin_fee_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->total_amount = $admin_fee_amount;
                $utli->type = "admin_fee";
                $utli->save();


            }




            $token = auth()->user()->createToken('API token')->accessToken;
            $meter = meter();
            $user = user();
            $user['token'] = $token;
            $user['meter'] = $meter;
            $user['tariff'] = $tariffs;
            $user['monthly_admin_fee'] = $admin_fee;






            return response()->json([
                'status' => true,
                'user' => $user
            ]);


        }











        if($request->meterNo == null) {
            $credentials = request(['email', 'password']);

            $usr = User::where('email', $request->email)->first() ?? null;
            $status = User::where('email', $request->email)->first()->status ?? null;
            if($status == 9){
                $message = "User does not exist";
                $code = 401;
                return error($message, $code);
            }

            if ($usr == null) {
                $message = "User does not exist";
                $code = 404;
                return error($message, $code);
            }

            Passport::tokensExpireIn(Carbon::now()->addMinutes(20));
            Passport::refreshTokensExpireIn(Carbon::now()->addMinutes(20));

            if (!auth()->attempt($credentials)) {
                $message = "Email No or Password Incorrect";
                $code = 422;
                return error($message, $code);
            }

            flush_token();


            $tariffs = Tariff::select('id', 'type', 'estate_id', 'title')
                ->where('user_id', Auth::id())
                ->get();
            foreach ($tariffs as $tariff) {
                $tariffState = TarrifState::where('tariff_id', $tariff->id)->first();
                $tariff->amount = $tariffState ? $tariffState->amount : null;
            }



            $admin_fee_get = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->latest('created_at')
                ->first();

            if($admin_fee_get){
                $admin_fee =  "1";
            }else{
                $admin_fee = "0";
            }

            $ck_utility = UtilitiesPayment::where('user_id', Auth::id())->where('type', 'utilities')->first();
            if($ck_utility){






            }else{

                $utility_amount = Estate::where('id', Auth::user()->estate_id)->first()->total_utility_amount ?? 0;
                $duration = Estate::where('id', Auth::user()->estate_id)->first()->duration ?? null;

                if($duration == null){
                    $message = "Estate utility duration not set, Contact support";
                    $code = 404;
                    return error($message, $code);
                }

                $nextDueDate = Carbon::now();
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:
                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $utility_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->type = "utilities";
                $utli->total_amount = $utility_amount;
                $utli->save();

            }


            //checkAdmin fee
            $admin_fee_amount = Setting::where('id', 1)->first()->admin_fee;
            $ck_admin_fee = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->first();

            $ck_admin_fee_status = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->first()->status ?? null;

            $former_admin_fee_date = UtilitiesPayment::where('user_id', Auth::id())
                ->where('type', 'admin_fee')
                ->whereMonth('created_at', Carbon::now()->month)
                ->whereYear('created_at', Carbon::now()->year)
                ->first()->created_at ?? null;



            if($ck_admin_fee){

            }elseif($ck_admin_fee && $ck_admin_fee_status == 2){

                $duration = "monthly";
                $nextDueDate =  $former_admin_fee_date;
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:
                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $admin_fee_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->total_amount = $admin_fee_amount;
                $utli->type = "admin_fee";
                $utli->save();


            }elseif($ck_admin_fee && $ck_admin_fee_status == null){

                $duration = "monthly";
                $nextDueDate =  Carbon::now();
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:
                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $admin_fee_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->total_amount = $admin_fee_amount;
                $utli->type = "admin_fee";
                $utli->save();


            }

            else{

                $duration = "monthly";
                $nextDueDate =  Carbon::now();
                switch ($duration) {
                    case 'weekly':
                        $nextDueDate->addWeek();
                        break;
                    case 'monthly':
                        $nextDueDate->addMonth();
                        break;
                    case 'yearly':
                        $nextDueDate->addYear();
                        break;
                    default:
                        $mssage = "Unknown duration '{$duration}'";
                        send_notification($mssage);

                }

                $utli = new UtilitiesPayment();
                $utli->estate_id = Auth::user()->estate_id;
                $utli->user_id = Auth::id();
                $utli->amount = $admin_fee_amount;
                $utli->next_due_date = $nextDueDate;
                $utli->duration = $duration;
                $utli->total_amount = $admin_fee_amount;
                $utli->type = "admin_fee";
                $utli->save();


            }



            $token = auth()->user()->createToken('API token')->accessToken;
            $meter = meter();
            $user = user();
            $user['token'] = $token;
            $user['meter'] = $meter;
            $user['tariff'] = $tariffs;
            $user['monthly_admin_fee'] = $admin_fee;


            return response()->json([
                'status' => true,
                'user' => $user
            ]);

        }


    }



    public function delete_user(request $request)
    {
        User::where('email', $request->email)->update(['status' => 9]);

        return response()->json([
            'status' => true,
            'message' => "User Deleted successfully"
        ], 200);


    }
    public function reset_password(request $request)
    {
        $email = $request->email;

        if($request->password != $request->confirm_password){
            $code = 422;
            $message = "Password does not match";
            return error($message, $code);
        }
        User::where('email', $email)->update(['password' => bcrypt($request->password)]);

        return response()->json([
            'status' => true,
            'message' => "Password successfully updated"
        ], 200);

    }

    public function get_user(request $request)
    {

        $fl = Setting::where('id', 1)->first();
        $flkey['flutterwave_secret'] = $fl->flutterwave_secret;
        $flkey['flutterwave_public'] = $fl->flutterwave_public;
        $pkkey['paystack_secret'] = $fl->paystack_secret;
        $pkkey['paystack_public'] = $fl->paystack_public;

        $admin_fee_get = UtilitiesPayment::where('user_id', Auth::id())
            ->where('type', 'admin_fee')
            ->whereMonth('created_at', Carbon::now()->month)
            ->whereYear('created_at', Carbon::now()->year)
            ->latest('created_at')
            ->first();

        if($admin_fee_get){
            $admin_fee =  "1";
        }else{
            $admin_fee = "0";
        }



        $token = auth()->user()->createToken('API token')->accessToken;
        $meter = meter();
        $user = user();
        $user['token'] = $token;
        $user['meter'] = $meter;
        $user['flutterwave_keys'] =  $flkey;
        $user['paystack_keys'] =  $pkkey;
        $user['monthly_admin_fee'] = $admin_fee;







        return response()->json([
            'status' => true,
            'user' => $user
        ]);



    }


    public function support(request $request)
    {


        $set = Setting::where('id', 1)->first();

        $user['payment_support'] = $set->payment_support;
        $user['meter_support'] = $set->meter_support;
        $user['general_support'] = $set->general_support;


        return response()->json([
            'status' => true,
            'data' => $user
        ]);



    }


}
";s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";